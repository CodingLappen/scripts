/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 5;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const char *fonts[]          = { "monospace:size=14" };
static const char dmenufont[]       = "monospace:size=14";
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char col_red[]	    = "#cc0000";
static const char col_green[]	    = "#859900";
static const char col_purple[]	    = "#5c3566";
static const char col_black[] 	    = "#000000";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_red, col_cyan, col_purple },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};

/* tagging */
static const char *tags[] = { " ðŸ’¾ ", "DISCORD", "BROWSER", " ðŸ“¬ BROWSER" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
	{ "Firefox",  "firefox",       	NULL,       1 << 3,       0,           -1 },
	{"Discord",	"discord",	NULL,	1 << 2,		0, 		1}, /* I want to start Discord always on the second monitor */
	{NULL, 		"obs", 		NULL, 	1<<4 ,		0 ,		-1}

};

/* layout(s) */
static const float mfact     = 0.60; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */ /**/
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "",      tile, NULL },    /* first entry is default */    /* no layout function means floating behavior */
};

/* key definitions */
#define MODKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },


/* custom functions declarations */
static void focusstackf(const Arg *arg);
static void setltor1(const Arg *arg);
static void toggletorall(const Arg *arg);
static void togglevorall(const Arg *arg);
static void vieworprev(const Arg *arg);
static void warptosel(const Arg *arg);
static void zoomf(const Arg *arg);

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *discord[] = {"discord", NULL};
static const char *obs[] = {"obs", NULL};
static const char *firefox[] ={"firefox", NULL};

/*  modkey is is the alt key usually so I just add some configs so I can open my standard programs faster*/
static Key keys[] = {
	/* modifier                     key        function        argument */
	
	{ MODKEY|ControlMask,           XK_b,      togglebar,      {0} },
	{ MODKEY|ControlMask,           XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY|ControlMask,          	XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY|ControlMask,          	XK_m,      incnmaster,     {.i = +1 } },
	{ MODKEY|ControlMask,       	XK_n,      incnmaster,     {.i = -1 } },
	{ MODKEY|ControlMask,           XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY|ControlMask,           XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_o, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ControlMask,             XK_c,      killclient,     {0} },
/*	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} }, */ /*Important LINE CHANGES the layout to different capabilities, since I don't use any other than tiling I just deleted them' */
	/*{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} }, */
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_6,                      0) /* Changing the setup so it won't us any good keys for the TAGS*/
	TAGKEYS(                        XK_7,                      1)
	TAGKEYS(                        XK_8,                      2)
	TAGKEYS(                        XK_9,                      3)
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ControlMask,           XK_t, 	   spawn,          {.v = termcmd } },
	{ MODKEY, 			XK_1,		spawn,	 	{.v = discord }},  /* spawns discord */
	{ MODKEY,			XK_2, 		spawn, 		{.v = firefox}}, /*I usually use firefox */
	{ MODKEY,			XK_3, 		spawn, 		{.v = obs }}, /*I obs */
	{ MODKEY|ShiftMask,             XK_q,      	quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

/* custom functions */
void
focusstackf(const Arg *arg) {
	Client *c = NULL, *i;

	if(!sel)
		return;
	if(lt[sellt]->arrange) {
		if (arg->i > 0) {
			for(c = sel->next; c && (!ISVISIBLE(c) || c->isfloating != sel->isfloating); c = c->next);
			if(!c)
				for(c = clients; c && (!ISVISIBLE(c) || c->isfloating == sel->isfloating); c = c->next);
		}
		else {
			for(i = clients; i != sel; i = i->next)
				if(ISVISIBLE(i) && i->isfloating == sel->isfloating)
					c = i;
			if(!c)
				for(i =  sel; i; i = i->next)
					if(ISVISIBLE(i) && i->isfloating != sel->isfloating)
						c = i;
		}
	}
	if(c) {
		focus(c);
		restack();
	}
	else
		focusstack(arg);
}

void
setltor1(const Arg *arg) {
	Arg a = {.v = &layouts[1]};

	setlayout((lt[sellt] == arg->v) ? &a : arg);
}

void
toggletorall(const Arg *arg) {
	Arg a;

	if(sel && ((arg->ui & TAGMASK) == sel->tags)) {
		a.ui = ~0;
		tag(&a);
	}
	else
		toggletag(arg);
}

void
togglevorall(const Arg *arg) {
	Arg a;

	if(sel && ((arg->ui & TAGMASK) == tagset[seltags])) {
		a.ui = ~0;
		view(&a);
	}
	else
		toggleview(arg);
}

void
vieworprev(const Arg *arg) {
	Arg a = {0};

	view(((arg->ui & TAGMASK) == tagset[seltags]) ? &a : arg);
}

void
warptosel(const Arg *arg) {
	XEvent ev;

	if(sel)
		XWarpPointer(dpy, None, sel->win, 0, 0, 0, 0, 0, 0);
	XSync(dpy, False);
	while(XCheckMaskEvent(dpy, EnterWindowMask, &ev));
}

void
zoomf(const Arg *arg) {
	if(sel && (lt[sellt]->arrange != tile || sel->isfloating)) 
		togglefloating(NULL);
	else
		zoom(NULL);
}
